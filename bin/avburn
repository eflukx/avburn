#!/usr/bin/env shoes
require 'rubygems'
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

# Distribute as rubygem
exec "shoes #{__FILE__}" unless Object.const_defined? "Shoes"

require 'avburn'
include Avburn


Shoes.app :title => "AVbuRn", :width => 980, :height => 730 do
  background gradient(rgb(245, 245, 245), rgb(190,190,190))
  #  background "#e0e0e0"

  flow do
    background "#881010"
    # background_gradient(rgb(138, 10, 10), rgb(190,30,30))
    # title "AVRb", :margin_top => 30, :color => "#ffffff"
    stack :width => '90%' do
      banner "AVbuRn", :margin_left => 15, :margin_top => 17, :variant => 'smallcaps', :size => 'large', :stroke => "#fff", :weight => "bold"
    end
    stack :margin_top => 17, :width => '-5%' do
      @fuse_stack = stack do
        @fuse_btn = button("FUSE") do |btn|
          @fuse_stack.hide
          @hex_stack.show

          @hex.hide
          @fuses.show
        end
      end
      @fuse_stack.hide
      @hex_stack = stack do
        #  @fuse_btn.toggle
        @hex_btn = button("HEX") do |btn|
          @fuse_stack.show
          @hex_stack.hide
          @hex.show
          @fuses.hide
        end
      end
    end
  end

  stack :margin => 10, :margin_top => 2 do
    flow do
      stack do #:width => '50%' do
        border "#fff"
        flow  do
          para "  Programmer:   ", :weight => "bold"
          @prog_list = list_box :items => Prog.all, :width => 120, :choose => Conf[:prog] do |list|
            @prog = list.text
            changed(list)
          end
          para "  Platform:     ", :weight => "bold"
          @platform_list = list_box :items => Part.all, :text => "Select..", :width => 120, :choose => @platform ||= Conf[:platform]  do |list|
            # @platform_list = list_box :items => [1,2], :width => 120 do |list|
            @platform = list.text
            changed(list)
            print_fuses()
          end
          para "  Memory:      ", :weight => "bold"
          @memory_list = list_box :items => Memory, :width => 120, :choose => Conf[:memory] do |list|
            @memory = list.text
            changed(list)
          end
          para "     "
                        image "../lib/avburn/img/burn.png", :margin => 8
          button "Read" do

            run_comm "#{@memory}:r:#{@memory}:#{@format||'i'}"
          end
          para "     "
          button "Config" do
            @config_dlg = dialog "Config", :width => 300, :height => 280 do
              flow do
                background "#881010"
                # title "AVRb", :margin_top => 30, :color => "#ffffff"
                stack :width => '100%' do
                  banner "Config", :margin_left => 15, :margin_top => 20, :variant => 'smallcaps', :size => 'large', :stroke => "#fff", :weight => "bold"
                end
              end
              stack :margin => 15 do
                flow do
                  ch = check :checked => @erase_flash
                  ch.click do |c|
                    @erase_flash = c.checked?
                  end
                  para "Disable auto erase for flash"
                end
                flow { check; para "Override invalid signature check" }
                flow { check; para "Perform chip erase" }
                flow { check; para "Do not verify" }
              end
              stack :margin_left => 110 do
                button "Close" do
                  close
                end
              end
            end

          end
        end


        flow do
          para "    Port:  ", :weight => "bold"
          edit_line do |l|
            @port = l.text
          end

          para "   CMD Opts:   ", :weight => "bold"
          edit_line do |l|
            @cmd_opts = l.text
          end

          para "    Format:      ", :weight => "bold"
          @format_list = list_box :items => Format.values, :width => 120, :choose => Conf[:format] do |list|
            @format = Format.keys[Format.values.index_of(list.text)]
            changed(list)
          end

        end

      end

    end

    @fuses = stack :margin_top => 15 do
      caption "Fuses"
      flow do
        button("HFUSE") { read_from_chip "hfuse" }
        button("LFUSE") { read_from_chip "lfuse" }
        button("EFUSE") { read_from_chip "efuse" }
        button "LOCK" do
          dialog
        end
      end

      @fuses_checks = stack(:margin_top => 20) { }
    end

    @hex = stack :margit_top => 15 do
      caption "HEX"
      flow do
        para "  Hexfile:   ", :weight => "bold"
        @hex_list = list_box :items => Hex.all, :width => 420, :choose => Conf[:hex] do |list|
          @hexfile = list.text
          check_hex_enabled
        end
        para "    "
        @verify_btn = button("Verify", :state => "disabled") { run_hex_comm :v }
        para "    "
        @burn_btn = button("Burn!", :state => "disabled") { run_hex_comm :w }
        image "../lib/avburn/img/burn.png", :margin => 8
      end

      flow do
        para "  Name:   ", :weight => "bold"
        edit_line :width => 220 do |le|
          @proj_name = le.text
        end
        para "    "
        button "Dump" do |btn|
          btn.state = "Disabled"
          Thread.new do
            ds = dump_stamp(@memory)
            run_comm "#{@memory}:r:#{ds}:i"
            data = File.read(ds)
            filename = "/#{@proj_name}_#{@platform}.hex"
            File.open(AvbHex + filename, "w") { |f| f << data }
            @hex_list.items = Hex.all
          end
        end

      end

    end
    @hex.hide
    # print_fuses

    stack(:margin_top => 20, :width => "100%", :height => 350, :scroll => true) do
      flow do
        caption "Log"
        button("Clear") { @log.text = "" }
      end
      @log = para "", :family => "Inconsolata;monospace;monospaced"
    end

    flow(:width => "100%") do
      background "#777"

      @footer = para "AVRburn v0.1"
    end

  end

  #
  #
  # Methods
  #
  def run_hex_comm(c)
    run_comm "#{@memory}:#{c}:#{ENV['HOME']}/#{AvbHex}/#{@hexfile}"
  end

  def print_fuses
    @fuses_checks.clear
    return unless @platform && fuse_ary = FuseLabel[@platform.to_sym]
    @fuses_checks.append  do
      [:hfuse, :lfuse, :efuse].each do |fuse|
        next unless all = fuse_ary[fuse]
        flow do
          ftxt = edit_line @fuses_store["#{fuse}hex"], :width => "25px" do |line|
            @fuses_store.set(fuse, line.text)
            print_fuses if line.text.size > 1
          end
          instance_variable_set("@#{fuse}_txt".to_sym, ftxt)
          all.each_with_index do |label, i|

            lbl = para  label
            ch = check :checked => avr_bool(@fuses_store[fuse][i])
            ch.click do |c|
              instance_variable_get("@#{fuse}_txt").text = @fuses_store.set_bit(fuse, i, c.checked?)
            end
            para "|", :stroke => "#aaa"
            # lbl.click { ch.checked = ch.checked? ? false : true } #TODO nice to click on labels... =/
          end
          para " #{@fuses_store[fuse].join.scan(/\d{4}/).join(' ')} "
          button("w") { write_fuse(fuse) }

        end
      end
      # button("Clear") { @log.text = "" }
    end
  end

  def toggle_mode
    @toggle_btn.text = @toggle_btn.text == "HEX" ? "FUSES" : "HEX"
  end

  def log(txt)
    @footer.text = txt.split("\n")[-1]
    @log.text += txt + "\n" #+ @log.text
  end

  def read_fuse(fuse)
    name =  (fuse =~ /\// ? fuse.split("/")[1] : fuse)
    data = File.read(fuse)
    log "Data: #{data}"
    @fuses_store.set(name, Integer(data).to_s(16))
  end

  def write_fuse(fu)
    hex = @fuses_store["#{fu}hex"].upcase
    run_comm "#{fu}:w:0x#{hex}:m"
  end

  def changed(obj)
    Conf.merge!({ :platform => @platform, :prog => @prog, :memory => @memory, :format => @format })
    Avburn.write_conf
  end

  def read_dir
    @fuses_store = FuseStore.new
    Fuses.each { |f| @fuses_store.set(f, "FF") }

    Dir['./*'].each do |file|
      case file
      when /\wfuse/ then read_fuse(file)
      when /\.hex/ then add_hex(file)
      end
    end
  end
  read_dir

  # #{Conf[:memory]}
  def read_from_chip(fuse)
    run_comm "#{fuse}:r:#{fuse}:h"
    read_fuse(fuse)
    print_fuses
  end

  def check_hex_enabled
    state = @hexfile ? nil : "disabled"
    @verify_btn.state = state
    @burn_btn.state = state
  end
end

#   stack :margin => 10 do
#     button "Start" do
#       @time = Time.now
#       @label.replace "Stop watch started at #@time"
#     end
#     button "Stop" do
#       @label.replace "Stopped, ", strong("#{Time.now - @time}"), " seconds elapsed."
#     end
#     @label = para "Press ", strong("start"), " to begin timing."
#   end
# end

