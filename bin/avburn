#!/usr/bin/env ruby
require 'shoes'
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'avburn'
include Avburn






Shoes.app :title => "AVbuRn", :width => 1000, :height => 760 do
  background gradient(rgb(245, 245, 245), rgb(190,190,190))
#  background "#e0e0e0"

  flow do
    background "#252499"
    # image "gamefaqs-logo.gif"
   # title "AVRb", :margin_top => 30, :color => "#ffffff"
     banner "AVbuRn", :margin_left => 15, :margin_top => 20, :variant => 'smallcaps', :size => 'large', :stroke => "#fff", :weight => "bold"
  end

  stack :margin => 10 do
    flow do
      stack :width => '50%' do
        flow do
          para "Programmer: ", :weight => "bold"
          @prog_list = list_box :items => Prog.all, :width => 120, :choose => Conf[:prog] do |list|
            @prog = list.text
            changed(list)
            check_enabled()
          end
        end

        flow do
          para "Platform:        ", :weight => "bold"
          @platform_list = list_box :items => Part.all, :text => "Select..", :width => 120, :choose => @platform ||= Conf[:platform]  do |list|
            # @platform_list = list_box :items => [1,2], :width => 120 do |list|
            @platform = list.text
            changed(list)
            print_fuses()
            check_enabled()
          end
        end

        flow do

          para "Memory:         ", :weight => "bold"
          @memory_list = list_box :items => Memory, :width => 120, :choose => Conf[:memory] do |list|
            @memory = list.text
            changed(list)
            check_enabled()
          end
        end
        caption "Read"
        flow do
          button("HFUSE") { read_from_chip "hfuse" }
          button("LFUSE") { read_from_chip "lfuse" }
          button("EFUSE") { read_from_chip "efuse" }
          button "LOCK" do
            dialog
          end
        end

      end

      stack :width => '-50%' do

        flow do
          caption "Port:"
          @game_field = edit_line do
            check_enabled()
          end
        end
        flow do
          caption "CMD Opts:"
          @game_field = edit_line do
            check_enabled()
          end
        end

        flow do
          para "Format:         "
          @format_list = list_box :items => Format.values, :width => 120, :choose => Conf[:format] do |list|
            @format = list.text
            changed(list)
            check_enabled()
          end
        end

      end
    end

    @fuses = stack do
    end
   # print_fuses

    stack(:width => "100%", :height => 350, :scroll => true) do
      caption "Log"
      button("Clear") { @log.text = "" }
      @log = para ""
    end

    stack(:width => "100%", :height => 20) do
      @footer = para "AVRburn v0.1"
    end

  end

  #
  #
  # Methods
  #

  def calc_fuses

  end

  # stack :margin => 20 do
  #   @average_score = para ""
  #   @one_line = para ""
  #   @full_review = para ""
  # end

  def print_fuses
    @fuses.clear
    return unless @platform && fuse_ary = FuseLabel[@platform.to_sym]
    @fuses.append  do
      caption "Fuses"
      [:hfuse, :lfuse, :efuse].each do |fuse|
        next unless all = fuse_ary[fuse]
        flow do
          ftxt = edit_line @fuses_store["#{fuse}hex"], :width => "25px" do |line|
            @fuses_store.set(fuse, line.text)
            print_fuses if line.text.size > 1
          end
          instance_variable_set("@#{fuse}_txt".to_sym, ftxt)
            all.each_with_index do |label, i|

            lbl = para  label
            ch = check :checked => avr_bool(@fuses_store[fuse][i])
            ch.click do |c|
              instance_variable_get("@#{fuse}_txt").text = @fuses_store.set_bit(fuse, i, c.checked?)
            end
            para "|", :stroke => "#aaa"
            # lbl.click { ch.checked = ch.checked? ? false : true } #TODO nice to click on labels... =/
            end
          para " (#{@fuses_store[fuse].join.scan(/\d{4}/).join(' ')}) "
          button("w") { write_fuse(fuse) }

        end
      end
      # button("Clear") { @log.text = "" }
    end
  end

  def log(txt)
    @footer.text = txt
    @log.text += txt + "\n" #+ @log.text
  end

  def read_fuse(fuse)
    name =  (fuse =~ /\// ? fuse.split("/")[1] : fuse)
    p name
    data = File.read(fuse)
    log "Data: #{data}"
    @fuses_store.set(name, Integer(data).to_s(16))
    p @fuses_store
  end

  def write_fuse(fu)
    hex = @fuses_store["#{fu}hex"].upcase
    run_comm "#{fu}:w:0x#{hex}:m"
  end

  def changed(obj)
    Conf.merge!({ :platform => @platform, :prog => @prog, :memory => @memory, :format => @format })
    Avburn.write_conf
  end

  def read_dir
    @fuses_store = FuseStore.new
    Fuses.each { |f| @fuses_store.set(f, "FF") }

    Dir['./*'].each do |file|
      case file
      when /\wfuse/ then read_fuse(file)
      when /\.hex/ then add_hex(file)
      end
    end
  end
  read_dir

  # #{Conf[:memory]}
  def read_from_chip(fuse)
    run_comm "#{fuse}:r:#{fuse}:h"
    read_fuse(fuse)
    print_fuses
  end



  def check_enabled
    [@one_line_review_button, @review_button, @average_score_button].each do |btn|
      if @game_field.text.size > 0 and !@platform_list.text.nil?
        btn.state = nil
      else
        btn.state = "disabled"
      end
    end
  end
end

#   stack :margin => 10 do
#     button "Start" do
#       @time = Time.now
#       @label.replace "Stop watch started at #@time"
#     end
#     button "Stop" do
#       @label.replace "Stopped, ", strong("#{Time.now - @time}"), " seconds elapsed."
#     end
#     @label = para "Press ", strong("start"), " to begin timing."
#   end
# end

